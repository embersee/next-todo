import { useEffect, useState } from 'react'

import Head from 'next/head'
import Link from 'next/link'
import type { NextPage } from 'next'
import { requireAuth } from '../utils/requireAuth'
import { trpc } from '../utils/trpc'

export const getServerSideProps = requireAuth(async (ctx) => {
  return { props: {} }
})

const Dashboard: NextPage = () => {
  const [isBrowser, setIsBrowser] = useState(false)
  useEffect(() => {
    setIsBrowser(process.browser)
  }, [])

  const { data, error, isLoading, isFetching } = trpc.useQuery(['users.me'])

  if (!data?.result) return null

  // if (isLoading) return <FullScreenLoader />
  // if (isFetching) return <FullScreenLoader />

  if (error) return <>{error.message}</>

  return (
    <div className='h-screen w-screen'>
      <Head>
        <title>Create Next App</title>
        <meta name='viewport' content='width=device-width, initial-scale=2' />
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='flex justify-center'>
        {isBrowser
          ? data.result.boards.map((board, i) => (
              <Link
                key={i}
                href={{
                  pathname: `/boards/${board.title}`,
                }}
              >
                <button className='flex items-center m-2 px-4 py-2 bg-white dark:bg-night-sky font-medium text-md leading-tight rounded-md shadow-md border-2 hover:border-blue-500 transition duration-150 ease-in-out'>
                  {board.title}
                </button>
              </Link>
            ))
          : null}
      </main>

      <footer></footer>
    </div>
  )
}

export default Dashboard

import * as ContextMenuPrimitive from '@radix-ui/react-context-menu'

import { useEffect, useState } from 'react'

import { BoardTitle } from '../components/BoardTitle'
import { DashboardContextMenu } from '../components/utils/DashboardContextMenu'
import { Data } from '../ts/interfaces'
import FullScreenLoader from '../components/utils/FullscreenLoader'
import Head from 'next/head'
import type { NextPage } from 'next'
import { requireAuth } from '../utils/requireAuth'
import toast from 'react-hot-toast'
import { trpc } from '../utils/trpc'
import { useRouter } from 'next/router'

export const getServerSideProps = requireAuth(async (ctx) => {
  return { props: {} }
})

const Dashboard: NextPage = () => {
  const [isBrowser, setIsBrowser] = useState(false)
  const [contextOpen, setContextOpen] = useState(false)
  const router = useRouter()

  const trpcClient = trpc.useContext()

  const { data, error, isLoading, isFetching, refetch } = trpc.useQuery([
    'users.me',
  ])
  const { mutate } = trpc.useMutation(['board.createBoard'], {
    onMutate: () => {
      toast.loading('Please wait...', {
        id: 'createBoard',
        style: {
          borderRadius: '10px',
          background: '#1E1E2A', //#1E1E2A
          color: '#fff',
          minWidth: '50px',
        },
      })
    },
    onSuccess: () => {
      toast.success('Board created', {
        id: 'createBoard',
        style: {
          borderRadius: '10px',
          background: '#1E1E2A', //#22C55E
          color: '#fff',
          minWidth: '50px',
        },
      })
      trpcClient.refetchQueries(['users.me'])
    },
  })

  const { mutate: deleteMutation } = trpc.useMutation(['board.deleteBoard'], {
    onMutate: () => {
      toast.loading('Deleting...', {
        id: 'deleteBoard',
        style: {
          borderRadius: '10px',
          background: '#1E1E2A', //#1E1E2A
          color: '#fff',
          minWidth: '50px',
        },
      })
    },
    onSuccess: () => {
      toast.success('Board deleted', {
        id: 'deleteBoard',
        style: {
          borderRadius: '10px',
          background: '#1E1E2A', //#22C55E
          color: '#fff',
          minWidth: '50px',
        },
      })
      trpcClient.refetchQueries(['users.me'])
    },
  })

  useEffect(() => {
    setIsBrowser(process.browser)
  }, [])

  if (!data?.result) return null

  if (isLoading) return <FullScreenLoader />
  // if (isFetching) return <FullScreenLoader />

  const createBoard = () => {
    mutate()
  }

  const deleteBoard = (board: string) => {
    deleteMutation(board)
  }

  return (
    <div className='h-full w-screen'>
      <Head>
        <title>Create Next App</title>
        <meta name='viewport' content='width=device-width, initial-scale=2' />
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='flex flex-col justify-center'>
        <h1 className='text-3xl font-bold absolute top-2 my-[2px] left-1/2 transform -translate-x-1/2 '>
          My Boards
        </h1>
        <div className='flex justify-center m-2'>
          <div className='grid grid-cols-4 gap-4'>
            {isBrowser &&
              data.result.boards.map((board, i) => {
                const boardData = JSON.stringify(board?.data)
                const boardDataParsed: Data = JSON.parse(boardData)
                const currentTitle = board.title
                return (
                  <div
                    key={i}
                    className='border-2 border-transparent rounded-md  py-2 flex flex-col justify-center text-center bg-white dark:bg-night-sky'
                  >
                    <ContextMenuPrimitive.Root
                      onOpenChange={(open) => setContextOpen(open)}
                    >
                      <ContextMenuPrimitive.Trigger>
                        <DashboardContextMenu
                          boardTitle={currentTitle}
                          deleteBoard={deleteBoard}
                        />
                        <BoardTitle
                          currentTitle={currentTitle}
                          textSize='text-xl'
                        />
                        <h3>
                          {'Columns: ' +
                            Object.keys(boardDataParsed.columns).length}
                        </h3>
                        <h3>
                          {'Tasks: ' +
                            Object.keys(boardDataParsed.tasks).length}
                        </h3>

                        <button
                          onClick={() =>
                            router.push(`/boards/${currentTitle}`, undefined, {
                              shallow: true,
                            })
                          }
                          className='flex items-center text-center mx-auto my-2 px-4 py-2 bg-super-silver dark:bg-black-velvet font-medium text-md leading-tight rounded-md shadow-md border-2 border-transparent hover:border-blue-500 transition duration-150 ease-in-out'
                        >
                          Open
                        </button>
                      </ContextMenuPrimitive.Trigger>
                    </ContextMenuPrimitive.Root>
                  </div>
                )
              })}

            <div className='border-2 border-transparent rounded-md h-16 flex justify-center hover:border-blue-500 transition duration-250 ease-in-out bg-white dark:bg-night-sky'>
              <button
                onClick={createBoard}
                className='text-xl h-full w-full px-10'
              >
                Create new board
              </button>
            </div>
          </div>
        </div>
      </main>

      <footer></footer>
    </div>
  )
}

export default Dashboard
